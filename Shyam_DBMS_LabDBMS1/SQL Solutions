//LAB 04 

//Creating and Using New Database
create database if not exists ecommerce;
use ecommerce;

1) You are required to create tables for supplier,customer,category,product,supplier_pricing,order,rating to store the data for the
E-commerce with the schema definition given below.
2) You are required to develop SQL based programs (Queries) to facilitate the Admin team of the E-Commerce company to retrieve the data in
summarized format - The Data Retrieval needs are described below.

CREATE TABLE IF NOT EXISTS supplier (
	SUPP_ID int primary key,
	SUPP_NAME varchar(50) NOT NULL,
	SUPP_CITY varchar(50),
	SUPP_PHONE varchar(10) NOT NULL
);
    
CREATE TABLE IF NOT EXISTS customer (
	CUS_ID INT NOT NULL,
	CUS_NAME VARCHAR(20) NOT NULL,
	CUS_PHONE VARCHAR(10) NOT NULL,
	CUS_CITY varchar(30) NOT NULL,
	CUS_GENDER CHAR,
	PRIMARY KEY (CUS_ID)
);   
    
CREATE TABLE IF NOT EXISTS category (
	CAT_ID INT NOT NULL,
	CAT_NAME VARCHAR(20) NOT NULL,
	PRIMARY KEY (CAT_ID)
);    

CREATE TABLE IF NOT EXISTS product (
	PRO_ID INT NOT NULL,
	PRO_NAME VARCHAR(20) NOT NULL DEFAULT "Dummy",
	PRO_DESC VARCHAR(60),
	CAT_ID INT NOT NULL,
	PRIMARY KEY (PRO_ID),
	FOREIGN KEY (CAT_ID) REFERENCES CATEGORY (CAT_ID)
);

CREATE TABLE IF NOT EXISTS supplier_pricing (
	PRICING_ID INT NOT NULL,
	PRO_ID INT NOT NULL,
	SUPP_ID INT NOT NULL,
	SUPP_PRICE INT DEFAULT 0,
	PRIMARY KEY (PRICING_ID),
	FOREIGN KEY (PRO_ID) REFERENCES PRODUCT (PRO_ID),
	FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID)
);
    
CREATE TABLE IF NOT EXISTS `order` (
	ORD_ID INT NOT NULL,
	ORD_AMOUNT INT NOT NULL,
	ORD_DATE DATE,
	CUS_ID INT NOT NULL,
	PRICING_ID INT NOT NULL,
	PRIMARY KEY (ORD_ID),
	FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER (CUS_ID),
	FOREIGN KEY (PRICING_ID) REFERENCES SUPPLIER_PRICING (PRICING_ID)
);
    
CREATE TABLE IF NOT EXISTS rating (
	RAT_ID INT NOT NULL,
	ORD_ID INT NOT NULL,
	RAT_RATSTARS INT NOT NULL,
	PRIMARY KEY (RAT_ID),
	FOREIGN KEY (ORD_ID) REFERENCES `order` (ORD_ID)
);

3) Insert the following data in the table created above
    
INSERT INTO supplier VALUES(1,"Rajesh Retails","Delhi",'1234567890'),
(2,"Appario Ltd.","Mumbai",'2589631470'),
(3,"Knome products","Banglore",'9785462315'),
(4,"Bansal Retails","Kochi",'8975463285'),
(5,"Mittal Ltd.","Lucknow",'7898456532');    
    
INSERT INTO customer VALUES(1,"AAKASH",'9999999999',"DELHI",'M'),
(2,"AMAN",'9785463215',"NOIDA",'M'),
(3,"NEHA",'9999999999',"MUMBAI",'F'),
(4,"MEGHA",'9994562399',"KOLKATA",'F'),
(5,"PULKIT",'7895999999',"LUCKNOW",'M');

INSERT INTO category VALUES( 1,"BOOKS"),
(2,"GAMES"),
(3,"GROCERIES"),
(4,"ELECTRONICS"),
(5,"CLOTHES");

INSERT INTO product VALUES(1,"GTA V","Windows 7 and above with i5 processor and 8GB RAM",2),
(2,"TSHIRT","SIZE-L with Black, Blue and White variations",5),
(3,"ROG LAPTOP","Windows 10 with 15inch screen, i7 processor, 1TB SSD",4),
(4,"OATS","Highly Nutritious from Nestle",3),
(5,"HARRY POTTER","Best Collection of all time by J.K Rowling",1),
(6,"MILK","1L Toned MIlk",3),
(7,"Boat EarPhones","1.5Meter long Dolby Atmos",4),
(8,"Jeans","Stretchable Denim Jeans with various sizes and color",5),
(9,"Project IGI","compatible with windows 7 and above",2),
(10,"Hoodie","Black GUCCI for 13 yrs and above",5),
(11,"Rich Dad Poor Dad","Written by RObert Kiyosaki",1),
(12,"Train Your Brain","By Shireen Stephen",1);
    
INSERT INTO supplier_pricing VALUES(1,1,2,1500),
(2,3,5,30000),
(3,5,1,3000),
(4,2,3,2500),
(5,4,1,1000),
(6,12,2,780),
(7,12,4,789),
(8,3,1,31000),
(9,1,5,1450),
(10,4,2,999),
(11,7,3,549),
(12,7,4,529),
(13,6,2,105),
(14,6,1,99),
(15,2,5,2999),
(16,5,2,2999);
    
INSERT INTO `order` VALUES (101,1500,"2021-10-06",2,1),
(102,1000,"2021-10-12",3,5),
(103,30000,"2021-09-16",5,2),
(104,1500,"2021-10-05",1,1),
(105,3000,"2021-08-16",4,3),
(106,1450,"2021-08-18",1,9),
(107,789,"2021-09-01",3,7),
(108,780,"2021-09-07",5,6),
(109,3000,"2021-09-10",5,3),
(110,2500,"2021-09-10",2,4),
(111,1000,"2021-09-15",4,5),
(112,789,"2021-09-16",4,7),
(113,31000,"2021-09-16",1,8),
(114,1000,"2021-09-16",3,5),
(115,3000,"2021-09-16",5,3),
(116,99,"2021-09-17",2,14);

INSERT INTO rating VALUES(1,101,4),
(2,102,3),
(3,103,1),
(4,104,2),
(5,105,4),
(6,106,3),
(7,107,4),
(8,108,4),
(9,109,3),
(10,110,5),
(11,111,3),
(12,112,4),
(13,113,2),
(14,114,1),
(15,115,1),
(16,116,0);

4) Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000.

select C_O.CUS_GENDER as 'Gender', count(C_O.CUS_GENDER) as 'NoOfCustomers' from (
select c.cus_id, c.cus_name, c.cus_gender from customer c inner join
`order` o on c.cus_id = o.cus_id
where o.ORD_AMOUNT >= 3000
group by c.cus_id
) as C_O
group by C_O.cus_gender;

5) Display all the orders along with product name ordered by a customer having Customer_Id=2

select o.cus_id, o.ord_id, o.ORD_AMOUNT, o.ORD_DATE, sp.SUPP_PRICE,
p.PRO_NAME from `order` o
inner join supplier_pricing sp
inner join product p
on (o.PRICING_ID = sp.PRICING_ID AND sp.PRO_ID = p.PRO_ID)
where o.CUS_Id = 2;

6) Display the Supplier details who can supply more than one product.

select s.*, NoOfProducts_Supplied from supplier s 
inner join (
select supp_id, count(pro_id) as NoOfProducts_Supplied from supplier_pricing
group by supp_id
HAVING NoOfProducts_Supplied > 1
) as sp
on s.supp_id = sp.supp_id;

7) Find the least expensive product from each category and print the table with category id, name, product name and price of the product

select P_SP.* from category C
inner join (
select P.cat_id, P.pro_id, P.pro_name, Minimal_Product_Price from product P inner join (
select pro_id, min(SUPP_PRICE) Minimal_Product_Price from supplier_pricing
group by pro_id
) as SP
on p.PRO_ID = SP.PRO_ID
) as P_SP 
ON (C.CAT_ID = P_SP.CAT_ID);

8) Display the Id and Name of the Product ordered after “2021-10-05”.

select p.pro_id, p.pro_name
-- o.ord_id, o.ORD_AMOUNT, o.ORD_DATE, sp.SUPP_PRICE 
from `order` o
inner join supplier_pricing sp
inner join product p
on (o.PRICING_ID = sp.PRICING_ID AND sp.PRO_ID = p.PRO_ID)
where o.ORD_DATE >= "2021-10-05"
group by p.PRO_ID;

9) Display customer name and gender whose names start or end with character 'A'.

SELECT cus_id, cus_name FROM ecommerce.customer where 
cus_name like 'A%'; 

10) Create a stored procedure to display supplier id, name, Rating(Average rating of all the products sold by every customer) and
Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average
Service” else print “Poor Service”. Note that there should be one rating per supplier.

//SQL

SELECT SUPP_ID, SUPP_NAME, AverageRating, 
CASE
WHEN AverageRating = 5 THEN 'Excellent Service'
WHEN AverageRating > 4 THEN 'Good Service'
WHEN AverageRating > 2 THEN 'Average Service'
ELSE 'Poor Service'
END As ServiceType
FROM (
select s.SUPP_ID, s.SUPP_NAME, avg(r.RAT_RATSTARS) AverageRating
from rating r
inner join `order` o
inner join supplier_pricing sp
inner join supplier s
on (
r.ORD_ID = o.ORD_ID AND
o.PRICING_ID = sp.PRICING_ID AND
sp.SUPP_ID = s.SUPP_ID
)
group by supp_id
) as R_O_SP_S;

//PROCEDURE

CREATE DEFINER=`root`@`localhost` PROCEDURE `DisplaySupplierRatingDetails`()
BEGIN
SELECT SUPP_ID, SUPP_NAME, AverageRating, 
CASE
WHEN AverageRating = 5 THEN 'Excellent Service'
WHEN AverageRating > 4 THEN 'Good Service'
WHEN AverageRating > 2 THEN 'Average Service'
ELSE 'Poor Service'
END As ServiceType
FROM (
select s.SUPP_ID, s.SUPP_NAME, avg(r.RAT_RATSTARS) AverageRating
from rating r
inner join `order` o
inner join supplier_pricing sp
inner join supplier s
on (
r.ORD_ID = o.ORD_ID AND
o.PRICING_ID = sp.PRICING_ID AND
sp.SUPP_ID = s.SUPP_ID
)
group by supp_id
) as R_O_SP_S;
END

//CALL PROCEDURE

call DisplaySupplierRatingDetails();
